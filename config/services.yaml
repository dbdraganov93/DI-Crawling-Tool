services:
    App\Service\S3Service:
        arguments:
            $bucket: '%env(AWS_BUCKET)%'
            $region: '%env(AWS_REGION)%'
            $profile: '%env(default::AWS_PROFILE)%'
    App\Service\IprotoService: ~
    App\Service\IprotoTokenService: ~
    App\CrawlerScripts\SampleCrawlerScript: ~
    App\CrawlerScripts\ShopfullyCrawler:
        autowire: true
        autoconfigure: true
    # Alias for the service container (needed for dynamic container access)
    Symfony\Component\DependencyInjection\ContainerInterface: '@service_container'

    # Default configuration for services
    _defaults:
        autowire: true      # Automatically injects dependencies into services
        autoconfigure: true # Automatically registers services as commands, event subscribers, etc.
        bind:
            $ftpServer: '%env(FTP_SERVER)%'       # Bind the FTP server environment variable
            $ftpUsername: '%env(FTP_USERNAME)%'  # Bind the FTP username environment variable
            $ftpPassword: '%env(FTP_PASSWORD)%'  # Bind the FTP password environment variable
            $ftpPort: '%env(int:FTP_PORT)%'      # Bind the FTP port as an integer
            $csvDir: '%kernel.project_dir%/public/csv' # Bind the CSV directory for CsvService
            $awsKey: '%env(AWS_ACCESS_KEY_ID)%'
            $awsSecret: '%env(AWS_SECRET_ACCESS_KEY)%'
            $region: '%env(AWS_REGION)%'
            $bucket: '%env(AWS_BUCKET)%'
    # Makes classes in src/ available to be used as services
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # Register all crawler scripts
    App\CrawlerScripts\:
        resource: '../src/CrawlerScripts/'
        tags: ['app.crawler_script']

    # Register the RunCrawlerScriptCommand and inject all crawler scripts
    App\Command\RunCrawlerScriptCommand:
        arguments:
            $crawlerScripts: !tagged_iterator app.crawler_script

    # Register FtpService explicitly
    App\Service\FtpService:
        arguments:
            $ftpServer: '%env(FTP_SERVER)%'
            $ftpUsername: '%env(FTP_USERNAME)%'
            $ftpPassword: '%env(FTP_PASSWORD)%'
            $ftpPort: '%env(int:FTP_PORT)%'

    # Register CsvService explicitly and inject the CSV directory
    App\Service\CsvService:
        arguments:
            $csvDir: '%kernel.project_dir%/public/csv'

    # Ensure StoreService is properly autowired
    App\Service\StoreService: ~

    # Ensure ShopfullyService is properly autowired
    App\Service\ShopfullyService: ~
