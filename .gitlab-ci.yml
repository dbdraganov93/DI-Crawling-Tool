variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS: "true"
    DOCKER_CERT_PATH: /certs/client 
    ECR_REGISTRY: 385750204895.dkr.ecr.eu-west-1.amazonaws.com
    IMAGE_CACHE_TAG: ${CI_COMMIT_REF_SLUG}_latest # <branch-name>_latest (mutable, use as base for the next build in the same branch)
    IMAGE_BUILD_TAG: ${CI_COMMIT_REF_SLUG}_build_${CI_COMMIT_SHORT_SHA} # <branch-name>_build_<commit-hash> (immutable, used for further testing and potential deployment)
    IMAGE_DEPLOY_TAG: ${CI_COMMIT_REF_SLUG}_release_${CI_COMMIT_SHORT_SHA} # <branch-name>_release_<commit-hash> (immutable, used in ECR for deployments)

stages:
  - Codestyle
  - UnitTest
  - sonarscan
  - build 
  - push
  - deploy 

services:
    - docker:dind

Codestyle:
  stage: Codestyle
  image: php:8.2
  before_script:
    - apt-get update && apt-get install -y git unzip libzip-dev libpng-dev libjpeg-dev libfreetype6-dev
    - docker-php-ext-install zip ftp gd
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --prefer-dist --no-scripts --no-progress
  script:
    - vendor/bin/phpcs --standard=PSR12 --report=diff src/
  allow_failure: false
UnitTest:
  stage: UnitTest
  image: php:8.2
  before_script:
    - apt-get update && apt-get install -y git unzip libzip-dev libpng-dev libjpeg-dev libfreetype6-dev
    - docker-php-ext-install zip ftp gd
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer install --prefer-dist --no-scripts --no-progress
    - echo "APP_ENV=test" > .env
  script:
    - php vendor/bin/simple-phpunit -c phpunit.xml.dist --coverage-clover build/coverage.xml --colors=never
  after_script:
    - rm -f .env
  artifacts:
    paths:
      - build/coverage.xml
  allow_failure: false
sonarscan:
  stage: sonarscan
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  cache:
    policy: pull-push
    key: "sonar-cache-$CI_COMMIT_REF_SLUG"
    paths:
      - "${SONAR_USER_HOME}/cache"
  script:
    - sonar-scanner \
        -Dsonar.projectKey="offerista-${CI_PROJECT_NAME}" \
        -Dsonar.sources=src \
        -Dsonar.tests=tests \
        -Dsonar.php.coverage.reportPaths=build/coverage.xml \
        -Dsonar.sourceEncoding=UTF-8 \
        -Dsonar.login="${SONAR_TOKEN}" \
        -Dsonar.host.url="${SONAR_HOST_URL}" \
        -Dsonar.projectVersion="${CI_COMMIT_REF_NAME}"
   # Needs report coverage artifact from UnitTest stage
  needs:
    - job: UnitTest
      artifacts: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH'
  allow_failure: true  # Won't block pipeline
build_container:
    stage: build
    image:
        name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:latest
        entrypoint: [""]
    before_script:
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
    script:
        - DOCKER_BUILDKIT=1 docker build -f docker/php/Dockerfile -t $CI_REGISTRY_IMAGE:$IMAGE_BUILD_TAG -t $CI_REGISTRY_IMAGE:$IMAGE_CACHE_TAG .
        - docker push $CI_REGISTRY_IMAGE:$IMAGE_BUILD_TAG
        - docker push $CI_REGISTRY_IMAGE:$IMAGE_CACHE_TAG

    tags:
        - docker
.push_image_template:
    stage: push
    tags:
        - docker
    image:
        name: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/docker:26.1.3-dind-alpine3.19 
        entrypoint: [""]
    before_script:
        # Log in on GitLab's registry:
        - docker login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
        # Log in on the AWS ECR:
        - apk update && apk add aws-cli
        - aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
        - docker info
    script:
        # Fetch the image we just build:
        - docker pull $CI_REGISTRY_IMAGE:$IMAGE_BUILD_TAG
        # Tag release and push it to ECR:
        - docker tag $CI_REGISTRY_IMAGE:$IMAGE_BUILD_TAG ${ECR_REGISTRY}/${ENVIRONMENT_NAME}-dicrawler:${IMAGE_DEPLOY_TAG}
        - docker push ${ECR_REGISTRY}/${ENVIRONMENT_NAME}-dicrawler:$IMAGE_DEPLOY_TAG
push_image_stage:
  extends: .push_image_template
  variables:
    ENVIRONMENT_NAME: stage
  only:
    - master
push_image_prod:
  extends: .push_image_template
  variables:
    ENVIRONMENT_NAME: prod
  only:
   - master
.deploy_app_template:
  stage: deploy
  tags:
    - shell
  script:
    - sed -i "s/\${env}/${ENVIRONMENT_NAME}/" ecs/ecs-task-definition.json
    - sed -i "s|\${dicrawler_image}|${ECR_REGISTRY}/${ENVIRONMENT_NAME}-dicrawler:${IMAGE_DEPLOY_TAG}|" ecs/ecs-task-definition.json
    - sed -i "s|\${IPROTO_CLIENT_ID}|${IPROTO_CLIENT_ID_ARN}|" ecs/ecs-task-definition.json
    - sed -i "s|\${IPROTO_CLIENT_SECRET}|${IPROTO_CLIENT_SECRET_ARN}|" ecs/ecs-task-definition.json
    - sed -i "s|\${APP_SECRET}|${APP_SECRET_ARN}|" ecs/ecs-task-definition.json
    - aws --region=eu-west-1 ecs register-task-definition --cli-input-json file://ecs/ecs-task-definition.json
    - aws --region=eu-west-1 ecs update-service --cluster dicrawler-di-${ENVIRONMENT_NAME} --service dicrawler-di-${ENVIRONMENT_NAME} --task-definition dicrawler-di-${ENVIRONMENT_NAME} --force-new-deployment
    - bin/ecs_deployment_check.sh
  artifacts:
    when: always
    paths:
      - ecs/ecs-task-definition.json
    expire_in: 10 days

.deploy_worker_template:
  stage: deploy
  tags:
    - shell
  script:
    - sed -i "s/\${env}/${ENVIRONMENT_NAME}/" ecs/ecs-task-definition-worker.json
    - sed -i "s|\${dicrawler_image}|${ECR_REGISTRY}/${ENVIRONMENT_NAME}-dicrawler:${IMAGE_DEPLOY_TAG}|" ecs/ecs-task-definition-worker.json
    - sed -i "s|\${IPROTO_CLIENT_ID}|${IPROTO_CLIENT_ID_ARN}|" ecs/ecs-task-definition-worker.json
    - sed -i "s|\${IPROTO_CLIENT_SECRET}|${IPROTO_CLIENT_SECRET_ARN}|" ecs/ecs-task-definition-worker.json
    - sed -i "s|\${APP_SECRET}|${APP_SECRET_ARN}|" ecs/ecs-task-definition-worker.json
    - aws --region=eu-west-1 ecs register-task-definition --cli-input-json file://ecs/ecs-task-definition-worker.json
    - aws --region=eu-west-1 ecs update-service --cluster dicrawler-di-${ENVIRONMENT_NAME} --service dicrawler-di-worker-${ENVIRONMENT_NAME} --task-definition dicrawler-di-worker-${ENVIRONMENT_NAME} --force-new-deployment
    - bin/ecs_deployment_check_worker.sh
  artifacts:
    when: always
    paths:
      - ecs/ecs-task-definition-worker.json
    expire_in: 10 days

deploy_app_stage:
  extends: .deploy_app_template
  variables:
    ENVIRONMENT_NAME: stage
    APP_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-stage-app-secret-nIt2DZ"
    IPROTO_CLIENT_ID_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-stage-client-credentials-4rAszT:IPROTO_CLIENT_ID::"
    IPROTO_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-stage-client-credentials-4rAszT:IPROTO_CLIENT_SECRET::"
  environment:
    name: dicrawler-${ENVIRONMENT_NAME}
    url: https://dicrawler.public-elb.di-stage.offerista.com
  only:
    - master

# Deploy to prod on master push (requires manual button-click when ready)
deploy_app_prod:
  extends: .deploy_app_template
  variables:
    ENVIRONMENT_NAME: prod
    APP_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-prod-app-secret-VVKipH"
    IPROTO_CLIENT_ID_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-prod-client-credentials-mmdL6r:IPROTO_CLIENT_ID::"
    IPROTO_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-prod-client-credentials-mmdL6r:IPROTO_CLIENT_SECRET::"
  environment:
    name: dicrawler-${ENVIRONMENT_NAME}
    url: https://dicrawler.offerista.com
  when: manual
  only:
    - master

deploy_worker_stage:
  extends: .deploy_worker_template
  variables:
    ENVIRONMENT_NAME: stage
    APP_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-stage-app-secret-nIt2DZ"
    IPROTO_CLIENT_ID_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-stage-client-credentials-4rAszT:IPROTO_CLIENT_ID::"
    IPROTO_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-stage-client-credentials-4rAszT:IPROTO_CLIENT_SECRET::"
  only:
    - master

# Deploy to prod on master push (requires manual button-click when ready)
deploy_worker_prod:
  extends: .deploy_worker_template
  variables:
    ENVIRONMENT_NAME: prod
    APP_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-prod-app-secret-VVKipH"
    IPROTO_CLIENT_ID_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-prod-client-credentials-mmdL6r:IPROTO_CLIENT_ID::"
    IPROTO_CLIENT_SECRET_ARN: "arn:aws:secretsmanager:eu-west-1:385750204895:secret:di-dicrawler-prod-client-credentials-mmdL6r:IPROTO_CLIENT_SECRET::"
  when: manual
  only:
    - master
