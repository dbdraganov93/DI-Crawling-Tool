<?php

/**
 * Class Marktjagd_Database_Entity_CrawlerType
 */
class Marktjagd_Database_Entity_CrawlerType extends Marktjagd_Database_Entity_Abstract
{
    /**
     * @var string
     */
    public static $TYPE_PDFS = 'brochures';

    /**
     * @var string
     */
    public static $TYPE_ARTICLES = 'articles';

    /**
     * @var string
     */
    public static $TYPE_STORES = 'stores';

    // table fields
    protected $_idCrawlerType;
    protected $_type;

    /**
     * Contains mapping of table columns to function
     *
     * @var array
     */
    protected $_aColumnMap = array('idCrawlerType' => 'IdCrawlerType',
                                   'type' => 'Type');


    /**
     * Set idCrawlerType, value is casted to int
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerType
     */
    public function setIdCrawlerType($mValue)
    {
        $this->_idCrawlerType = (int) $mValue;
        return $this;
    }

    /**
     * Returns idCrawlerType
     *
     * @return int idCrawlerType
     */
    public function getIdCrawlerType()
    {
        return $this->_idCrawlerType;
    }

    /**
     * Set type, value is casted to string
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerType
     */
    public function setType($mValue)
    {
        $this->_type = (string) $mValue;
        return $this;
    }

    /**
     * Returns type
     *
     * @return string type
     */
    public function getType()
    {
        return $this->_type;
    }

    /**
     * Returns the mapper class, if no one exists, default will be created.
     *
     * @return  Marktjagd_Database_Mapper_CrawlerType
     */
    public function getMapper()
    {
        return parent::getMapper();
    }

    /**
     * Saves data to database If the primary key is set,
     * data will be updated.
     *
     * @param bool $bNull Save also null values
     *
     * @return void
     */
    public function save($bNull = false)
    {
        $this->getMapper()->save($this, $bNull);
    }

    /**
     * Loads the data by primary key(s). By multiple primary
     * keys use an array with the values of the primary key columns.
     *
     * @param mixed $mId Primary key(s) value(s)
     *
     * @return bool True if found, otherwise false
     */
    public function find($mId)
    {
        return $this->getMapper()->find($mId, $this);
    }
}
