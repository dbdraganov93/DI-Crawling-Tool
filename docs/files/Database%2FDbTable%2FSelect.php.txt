<?php
class Marktjagd_Database_DbTable_Select extends Zend_Db_Table_Select
{

    /**
     * Saves map of alias to table name
     *
     * @var array
     */
    protected $_nameMap = null;

    /**
     * Save original table name (alias support).
     *
     * @param null|string $type Type of join; inner, left, and null are currently
     * supported
     * @param array|string|Zend_Db_Expr $name Table name
     * @param string $cond Join on this condition
     * @param string $cols The columns to select from the joined table
     * @param string $schema The database name to specify, if any
     * @return Zend_Db_Select
     */
    protected function _join($type, $name, $cond, $cols, $schema = null)
    {
        // check for alias
        if (is_array($name)) {
            $this->_nameMap = $name;
        } else {
            $this->_nameMap = array();
        }

        return parent::_join($type, $name, $cond, $cols, $schema);
    }

    /**
     * Add table name by columns. (table.column)
     *
     * @param string $correlationName The table/join the columns come from.
     * @param array|string $cols The list of columns; preferably as an array, but
     * possibly as a string containing one column
     * @param bool|string $afterCorrelationName True if it should be prepended, a
     * correlation name if it should be inserted
     * @return void
     */
    protected function _tableCols($correlationName, $cols, $afterCorrelationName = null)
    {
        if (is_array($cols)) {
            $cols = $this->_getColumnObjectMapping($cols, $correlationName);
        } elseif ($cols == '*') {
            // get all table columns to build the object mapping string
            $fields = $this->getAdapter()->describeTable(
                $this->_parts[self::FROM][$correlationName]['tableName'],
                $this->_parts[self::FROM][$correlationName]['schema']);

            $cols = $this->_getColumnObjectMapping(array_keys($fields), $correlationName);
        }

        parent::_tableCols($correlationName, $cols, $afterCorrelationName);
    }

    /**
     * Builds the object mapping string which is used as index for the result to
     * determine the correct object for set options function.
     *
     * @param array $cols Columns
     * @param string $correlationName The table/join the columns come from.
     * @return array Array with object mapping string as index
     */
    private function _getColumnObjectMapping($cols, $correlationName)
    {
        $data = $cols;
        $cols = array();

        foreach ($data as $key => $value) {
            // check for column alias and function
            if (preg_match('/^(.+)\s+' . self::SQL_AS . '\s+(.+)$/i', $value)
                || preg_match('/\(.*\)/', $value)
                || preg_match('/(.+)\.(.+)/', $value)) {
                // do nothing
                $cols[$key] = $value;
                continue;
            }

            // check for alias and get full table name
            $prefix = isset($this->_nameMap[$correlationName])
                        ? $this->_nameMap[$correlationName]
                        : $correlationName;

            $cols[$prefix . '.' . $value] = $value;
        }
        return $cols;
    }
}


