<?php

class Marktjagd_Database_Entity_CrawlerBehaviour extends Marktjagd_Database_Entity_Abstract
{
    // table fields
    protected $_idCrawlerBehaviour;
    protected $_behaviour;

    /**
     * Contains mapping of table columns to function
     *
     * @var array
     */
    protected $_aColumnMap = array('idCrawlerBehaviour' => 'IdCrawlerBehaviour',
                                   'behaviour' => 'Behaviour');


    /**
     * Set idCrawlerBehaviour, value is casted to int
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerBehaviour
     */
    public function setIdCrawlerBehaviour($mValue)
    {
        $this->_idCrawlerBehaviour = (int) $mValue;
        return $this;
    }

    /**
     * Returns idCrawlerBehaviour
     *
     * @return int idCrawlerBehaviour
     */
    public function getIdCrawlerBehaviour()
    {
        return $this->_idCrawlerBehaviour;
    }

    /**
     * Set behaviour, value is casted to string
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerBehaviour
     */
    public function setBehaviour($mValue)
    {
        $this->_behaviour = (string) $mValue;
        return $this;
    }

    /**
     * Returns behaviour
     *
     * @return string behaviour
     */
    public function getBehaviour()
    {
        return $this->_behaviour;
    }

    /**
     * Returns the mapper class, if no one exists, default will be created.
     *
     * @return  Marktjagd_Database_Mapper_CrawlerBehaviour
     */
    public function getMapper()
    {
        return parent::getMapper();
    }

    /**
     * Saves data to database If the primary key is set,
     * data will be updated.
     *
     * @param bool $bNull Save also null values
     *
     * @return void
     */
    public function save($bNull = false)
    {
        $this->getMapper()->save($this, $bNull);
    }

    /**
     * Loads the data by primary key(s). By multiple primary
     * keys use an array with the values of the primary key columns.
     *
     * @param mixed $mId Primary key(s) value(s)
     *
     * @return bool True if found, otherwise false
     */
    public function find($mId)
    {
        return $this->getMapper()->find($mId, $this);
    }
}
