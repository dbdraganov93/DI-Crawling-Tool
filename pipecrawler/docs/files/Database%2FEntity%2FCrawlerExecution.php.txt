<?php

class Marktjagd_Database_Entity_CrawlerExecution extends Marktjagd_Database_Entity_Abstract
{
    // table fields
    protected $_idCrawlerExecution;
    protected $_day;
    protected $_time;

    /**
     * Contains mapping of table columns to function
     *
     * @var array
     */
    protected $_aColumnMap = array('idCrawlerExecution' => 'IdCrawlerExecution',
                                   'day' => 'Day',
                                   'time' => 'Time');


    /**
     * Set idCrawlerExecution, value is casted to int
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerExecution
     */
    public function setIdCrawlerExecution($mValue)
    {
        $this->_idCrawlerExecution = (int) $mValue;
        return $this;
    }

    /**
     * Returns idCrawlerExecution
     *
     * @return int idCrawlerExecution
     */
    public function getIdCrawlerExecution()
    {
        return $this->_idCrawlerExecution;
    }

    /**
     * Set day, value is casted to string
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerExecution
     */
    public function setDay($mValue)
    {
        $this->_day = (string) $mValue;
        return $this;
    }

    /**
     * Returns day
     *
     * @return string day
     */
    public function getDay()
    {
        return $this->_day;
    }

    /**
     * Set time, value is casted to string
     *
     * @param mixed $mValue Value
     *
     * @return Marktjagd_Database_Entity_CrawlerExecution
     */
    public function setTime($mValue)
    {
        $this->_time = (string) $mValue;
        return $this;
    }

    /**
     * Returns time
     *
     * @return string time
     */
    public function getTime()
    {
        return $this->_time;
    }

    /**
     * Returns the mapper class, if no one exists, default will be created.
     *
     * @return  Marktjagd_Database_Mapper_CrawlerExecution
     */
    public function getMapper()
    {
        return parent::getMapper();
    }

    /**
     * Saves data to database If the primary key is set,
     * data will be updated.
     *
     * @param bool $bNull Save also null values
     *
     * @return void
     */
    public function save($bNull = false)
    {
        $this->getMapper()->save($this, $bNull);
    }

    /**
     * Loads the data by primary key(s). By multiple primary
     * keys use an array with the values of the primary key columns.
     *
     * @param mixed $mId Primary key(s) value(s)
     *
     * @return bool True if found, otherwise false
     */
    public function find($mId)
    {
        return $this->getMapper()->find($mId, $this);
    }
}
