<?php

/*
 * Store Crawler für Schaffrath (ID: 69868)
 */

class Crawler_Company_Schaffrath_Store extends Crawler_Generic_Company
{
    private const HEADERS = [4, 7, 11, 16]; // 'columns' 4, 7, 11 and 16 has the headers

    public function crawl($companyId)
    {
        $cStores   = new Marktjagd_Collection_Api_Store();
        $baseUrl   = 'https://www.schaffrath.com';
        $searchUrl = $baseUrl . '/ueber-uns/filialen/';

        $sPage = new Marktjagd_Service_Input_Page();
        $DOMDocument = $sPage->getResponseAsDOM($searchUrl);
        $xPath = new DOMXPath($DOMDocument);

        // The website seems to be generated by 'columns' and 'rows' - We start at Div 4 until 17
        $headerNames     = [];
        $storeArrayData  = [];
        for ($i = 4; $i <= 17; $i++) {
            // get Headers
            if (in_array($i, self::HEADERS)) {
                $query = $this->getXpathQuery($i);
                $entries = $xPath->query($query);

                foreach ($entries as $entry) {
                    if(in_array($i, self::HEADERS)){
                        // Check headers for possible changes in the table structure
                        if(
                            ($i == 4 && $entry->textContent != 'MÖBELHÄUSER') ||
                            ($i == 7 && $entry->textContent != 'Casa Living & Fachabteilungen') ||
                            ($i == 11 && $entry->textContent != 'Küchen Mega Stores') ||
                            ($i == 16 && $entry->textContent != 'Küchenmärkte')
                        ) {
                            throw new Exception(
                                'The header has been modified, the crawler needs adjustments. Header found: ' .
                                $entry->textContent . PHP_EOL
                            );
                        }

                        $headerNames[$i] = $entry->textContent;
                        break;
                    }
                }
                continue;
            }

            // get Store data
            $maxItemsPerRow = 10;
            for ($j = 1; $j <= $maxItemsPerRow; $j++) {
                $storeArray = $this->getStoresDataByXpath($i, $j, $xPath);
                if(empty($storeArray)){
                    continue;
                }

                $storeArrayData[$i][$j] = $storeArray;
            }
            // Each 'row' ends here
        }

        foreach ($storeArrayData as $rowKey =>$storesRow) {
            $distribution = '';
            foreach ($headerNames as $headerKey => $headerName){
                if($rowKey > $headerKey){
                    $distribution = $headerName;
                }
            }

            foreach ($storesRow as $stores) {
                foreach ($stores as $store) {
                    $eStore = new Marktjagd_Entity_Api_Store();
                    $eStore->setTitle($distribution . ' ' . $store['title'])
                        ->setStreetAndStreetNumber($store['address'])
                        ->setZipcodeAndCity($store['zip'])
                        ->setWebsite($baseUrl . $store['url'])
                        ->setPhoneNormalized($store['phone'])
                        ->setDistribution($distribution)
                        ->setStoreNumber($distribution . ' ' . $store['title'])
                    ;

                    $cStores->addElement($eStore);
                }
            }
        }

        return $this->getResponse($cStores, $companyId);
    }

    private function getXpathQuery(int $queryId, int $itemId = 0): string
    {
        // get Column Headers
        if(in_array($queryId, self::HEADERS)){
            // e.g: '/html/body/div[4]/div/div/div[4]/div/div/div/div/div/h2';
            return '/html/body/div[4]/div/div/div[' . ((string) $queryId) . ']/div/div/div/div/div/h2';
        }

        // get Content e.g: '/html/body/div[4]/div/div/div[5]/div/div/div/div[1]'
        return '/html/body/div[4]/div/div/div[' . $queryId . ']/div/div/div/div[' . $itemId . ']';
    }

    private function getStoresDataByXpath(int $queryRowId, int $itemId = 0, DOMXPath $xPath): array
    {
        $storeData = [];

        // get store URL
        $urlQuery = '/html/body/div[4]/div/div/div[' . $queryRowId . ']/div/div/div/div[' . $itemId . ']/div[2]/a';
        $urlNodes = $xPath->query($urlQuery);
        foreach ($urlNodes as $node){
            /** @var DOMElement $node */
            $storeData[$itemId]['url'] = $node->getAttribute('href');
        }

        // get store title
        $titleQuery = '/html/body/div[4]/div/div/div[' . $queryRowId . ']/div/div/div/div[' . $itemId . ']/div[1]';
        $titleResults = $xPath->query($titleQuery);
        foreach ($titleResults as $node){
            if(empty($node->textContent)){
                continue;
            }
            /** @var DOMElement $node */
            $storeData[$itemId]['title'] = $node->textContent;
        }

        // get store image
        //$imgQuery = '/html/body/div[4]/div/div/div[' . $queryId . ']/div/div/div/div[' . $itemId . ']/div[2]/a/img';
        //$imgResults = $xPath->query($imgQuery);
        //foreach ($imgResults as $result){
        //    $storeData[$itemId]['img'] = $xPath->evaluate("string(/". $imgQuery  . "/@src)");
        //}

        // get store address
        $addressQuery = '/html/body/div[4]/div/div/div[' . $queryRowId . ']/div/div/div/div[' . $itemId . ']/div[2]/div/';
        if ($queryRowId == 5 && $itemId == 1) {
            // Irregularities within column 5 item 1
            $addressQuery = $addressQuery . 'div[1]/div[1]/span/b/span';
        } elseif($queryRowId == 5 && $itemId == 2) {
            // Irregularities within column 5 item 2
            $addressQuery = $addressQuery . 'span/b/span';
        } elseif($queryRowId == 12 && $itemId == 2) {
            // Irregularities within column 12 item 2
            $addressQuery = $addressQuery . 'div[1]/b/span';
        } else {
            $addressQuery = $addressQuery . 'b/span';
        }

        $addressResults = $xPath->query($addressQuery);
        foreach ($addressResults as $node){
            /** @var DOMElement $node */
            $storeData[$itemId]['address'] = $node->textContent;
        }

        // get store zip/city
        $zipQuery = '/html/body/div[4]/div/div/div[' . $queryRowId . ']/div/div/div/div[' . $itemId . ']/div[2]/div/div[1]';
        if ($queryRowId == 5 && $itemId == 1) {
            // Irregularities within column 5 item 1
            $zipQuery = $zipQuery . '/div[2]';
        } elseif ($queryRowId == 12 && $itemId == 2) {
            // Irregularities within column 12 item 2
            $zipQuery = '/html/body/div[4]/div/div/div[12]/div/div/div/div[2]/div[2]/div/div[2]/b/span';
        } elseif($queryRowId == 13 && $itemId == 2) {
            // Irregularities within column 13 item 2 - City is separated
            $cityText = $storeData[$itemId]['title'];
            $zipQuery = '/html/body/div[4]/div/div/div[13]/div/div/div/div[2]/div[2]/div/div/b[1]/span';
        }
        $zipResults = $xPath->query($zipQuery);
        foreach ($zipResults as $node){
            /** @var DOMElement $node */
            $storeData[$itemId]['zip'] = isset($cityText) ? $node->textContent . ' ' . $cityText : $node->textContent;
        }

        // get store phone
        $phoneQuery = '/html/body/div[4]/div/div/div[' . $queryRowId . ']/div/div/div/div[' . $itemId . ']/div[2]/div/div[3]';
        $phoneNodes = $xPath->query($phoneQuery);
        foreach ($phoneNodes as $node){
            /** @var DOMElement $node */
            $storeData[$itemId]['phone'] = $node->textContent;
        }

        return $storeData;
    }
}
